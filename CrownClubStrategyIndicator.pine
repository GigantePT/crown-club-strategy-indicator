// 2025 Â© Johnny Gigante

// This script is licensed under the Creative Commons Attribution-NonCommercial 4.0 International (CC BY-NC 4.0).
// You may use and adapt this script for personal or educational purposes,
// but you must give credit to the original author and you may not use it for commercial purposes.
// License details: https://creativecommons.org/licenses/by-nc/4.0/

//@version=6
indicator("ðŸ‘‘ Crown Club Strategy ðŸ‘‘", overlay = true)

/////////////////////////////////////////////////////////////////////
// INPUTS
/////////////////////////////////////////////////////////////////////

// SMAs
sma1Length = input(50, "SMA 1 Length", "Length of the first SMA", group="SMA", display = display.data_window)
sma1Color = input(color.aqua, "SMA 1 Color", "Color of the first SMA line", group="SMA")
sma2Length = input(200, "SMA 2 Length", "Length of the second SMA", group="SMA", display = display.data_window)
sma2Color = input(color.purple, "SMA 2 Color", "Color of the second SMA line", group="SMA")

// Last Week High/Low
lastWeekHighLowColor = input(color.rgb(91, 156, 246), "Last Week's High/Low Color", "Color of the Last Week's High and Low horizontal lines", group="Last Week's High/Low")
lastWeekFibLevelsColor = input(color.rgb(24, 72, 204), "Last Week's Fibonacci Levels Color", "Color of the Last Week's Fibonacci Levels", group="Last Week's High/Low")
lastWeekManualBias = input.string(title="Last Week's Bias", defval = "Long ðŸ“ˆ", options = ["Long ðŸ“ˆ", "Short ðŸ“‰"], tooltip = "Manually set the bias for the Last Week", group="Last Week's High/Low", display = display.data_window)

// Yesterday High/Low
yesterdayHighLowColor = input(color.yellow, "Yesterday's High/Low Color", "Color of Yesterday's High and Low horizontal lines", group="Yesterday's High/Low")
yesterdayFibLevelsColor = input(color.orange, "Yesterday's Fibonacci Levels Color", "Color of Yesterday's Fibonacci Levels", group="Yesterday's High/Low")
yesterdayManualBias = input.string(title="Yesterday's Bias", defval = "Long ðŸ“ˆ", options = ["Long ðŸ“ˆ", "Short ðŸ“‰"], tooltip = "Manually set the bias for Yesterday", group="Yesterday's High/Low", display = display.data_window)

// Labels
showLabels = input.bool(true, "Show Labels", "Show all labels", group=" Labels")



//////////////////////////////////////////////////////////////////////
// FUNCTIONS
//////////////////////////////////////////////////////////////////////

// Draw Last Week's High and Low
drawLastWeekHighLow() =>
    // Get the previous week's high and low using weekly timeframe
    prevWeekHigh = request.security(syminfo.tickerid, "W", high[1], lookahead=barmerge.lookahead_on)
    prevWeekLow  = request.security(syminfo.tickerid, "W", low[1], lookahead=barmerge.lookahead_on)

    // Get the time (in milliseconds) of the start of this week and the start of last week
    startOfThisWeek = time("W")  // milliseconds since epoch
    startOfLastWeek = startOfThisWeek - 7 * 24 * 60 * 60 * 1000  // subtract 7 days

    x2Time = startOfThisWeek + 5 * 24 * 60 * 60 * 1000  // extend 5 days to future

    // Only draw on first bar of the current week (to avoid multiple lines)
    isFirstBarOfWeek = ta.change(startOfThisWeek) != 0

    // Persistent lines and labels
    var line highLine = na
    var line lowLine = na
    var label highLabel = na
    var label lowLabel = na

    // This variable will store the bar index where last week started
    var int lastWeekStartBarIndex = na

    // Find the first bar where time >= startOfLastWeek, only once per week
    if na(lastWeekStartBarIndex) and time >= startOfLastWeek
        lastWeekStartBarIndex := bar_index

    if isFirstBarOfWeek and not na(lastWeekStartBarIndex)
        // Delete old lines
        line.delete(highLine)
        line.delete(lowLine)
        label.delete(highLabel)
        label.delete(lowLabel)

        // Create new horizontal rays (extend to the right)
        highLine := line.new(x1=startOfLastWeek, y1=prevWeekHigh, x2=x2Time, y2=prevWeekHigh, xloc=xloc.bar_time, extend=extend.none, color=lastWeekHighLowColor, width=2)
        lowLine := line.new(x1=startOfLastWeek, y1=prevWeekLow, x2=x2Time, y2=prevWeekLow, xloc=xloc.bar_time, extend=extend.none, color=lastWeekHighLowColor, width=2)

        // Add label x coordinate at the center of yesterday
        xLabel = (startOfLastWeek + startOfThisWeek) / 2

        // Show labels (if enabled)
        if showLabels
            highLabel := label.new(x=xLabel, y=prevWeekHigh, text="LAST WEEK HIGH (" + str.tostring(prevWeekHigh, format.mintick) + ")", xloc=xloc.bar_time, style=label.style_none, textcolor=lastWeekHighLowColor, size=size.normal)
            lowLabel := label.new(x=xLabel, y=prevWeekLow, text="LAST WEEK LOW (" + str.tostring(prevWeekLow, format.mintick) + ")", xloc=xloc.bar_time, style=label.style_none, textcolor=lastWeekHighLowColor, size=size.normal)


// Set the Last Week bias variable
setLastWeekBias() =>
    if lastWeekManualBias == "Long ðŸ“ˆ"
        "Long"
    else
        "Short"


// Draw Last Week's Fibonacci levels and Golden Zone based on its bias
drawLastWeekFibLevels(lastWeekBias) =>
    // Get the previous week's high and low using weekly timeframe
    prevWeekHigh = request.security(syminfo.tickerid, "W", high[1], lookahead=barmerge.lookahead_on)
    prevWeekLow  = request.security(syminfo.tickerid, "W", low[1], lookahead=barmerge.lookahead_on)

    // Get the time (in milliseconds) of the start of this week and the start of last week
    startOfThisWeek = time("W")  // milliseconds since epoch
    startOfLastWeek = startOfThisWeek - 7 * 24 * 60 * 60 * 1000  // subtract 7 days

    x2Time = startOfThisWeek + 5 * 24 * 60 * 60 * 1000  // extend 5 days to future

    // Difference between Last Week's High and Low price
    deltaHighLow = prevWeekHigh - prevWeekLow

    // FibLevels
    float lastWeek05 = na
    float lastWeek0618 = na
    float lastWeek1618 = na

    // Set the Fib Levels based on the bias
    if lastWeekBias == "Long"
        lastWeek05 := prevWeekLow + (deltaHighLow * 0.5)
        lastWeek0618 := prevWeekLow + (deltaHighLow * 0.618)
        lastWeek1618 := prevWeekLow + (deltaHighLow * 1.618)
    else
        lastWeek05 := prevWeekHigh - (deltaHighLow * 0.5)
        lastWeek0618 := prevWeekHigh - (deltaHighLow * 0.618)
        lastWeek1618 := prevWeekHigh - (deltaHighLow * 1.618)

    // Only draw on first bar of the current week (to avoid multiple lines)
    isFirstBarOfWeek = ta.change(startOfThisWeek) != 0

    // Persistent lines and labels
    var line lastWeek05Line = na
    var line lastWeek0618Line = na
    var line lastWeek1618Line = na
    var label lastWeek05Label = na
    var label lastWeek0618Label = na
    var label lastWeek1618Label = na
    var box lastWeekGZ = na

    // This variable will store the bar index where last week started
    var int lastWeekStartBarIndex = na

    // Find the first bar where time >= startOfLastWeek, only once per week
    if na(lastWeekStartBarIndex) and time >= startOfLastWeek
        lastWeekStartBarIndex := bar_index

    if isFirstBarOfWeek and not na(lastWeekStartBarIndex)
        // Delete old lines
        line.delete(lastWeek05Line)
        line.delete(lastWeek0618Line)
        line.delete(lastWeek1618Line)
        label.delete(lastWeek05Label)
        label.delete(lastWeek0618Label)
        label.delete(lastWeek1618Label)
        box.delete(lastWeekGZ)

        // Create new horizontal rays (extend to the right)
        lastWeek05Line := line.new(x1=startOfLastWeek, y1=lastWeek05, x2=x2Time, y2=lastWeek05, xloc=xloc.bar_time, extend=extend.none, color=lastWeekFibLevelsColor, width=2)
        lastWeek0618Line := line.new(x1=startOfLastWeek, y1=lastWeek0618, x2=x2Time, y2=lastWeek0618, xloc=xloc.bar_time, extend=extend.none, color=lastWeekFibLevelsColor, width=2)
        lastWeek1618Line := line.new(x1=startOfLastWeek, y1=lastWeek1618, x2=x2Time, y2=lastWeek1618, xloc=xloc.bar_time, extend=extend.none, color=lastWeekFibLevelsColor, width=2)

        // Add label x coordinate at the center of yesterday
        xLabel = (startOfLastWeek + startOfThisWeek) / 2
        
        // Show labels (if enabled)
        if showLabels
            lastWeek05Label := label.new(x=xLabel, y=lastWeek05, text="LAST WEEK 0.5 (" + str.tostring(lastWeek05, format.mintick) + ")", xloc=xloc.bar_time, style=label.style_none, textcolor=lastWeekFibLevelsColor, size=size.normal)
            lastWeek0618Label := label.new(x=xLabel, y=lastWeek0618, text="LAST WEEK 0.618 (" + str.tostring(lastWeek0618, format.mintick) + ")", xloc=xloc.bar_time, style=label.style_none, textcolor=lastWeekFibLevelsColor, size=size.normal)
            lastWeek1618Label := label.new(x=xLabel, y=lastWeek1618, text="LAST WEEK 1.618 (" + str.tostring(lastWeek1618, format.mintick) + ")", xloc=xloc.bar_time, style=label.style_none, textcolor=lastWeekFibLevelsColor, size=size.normal)
        
        // Draw Golden Zone
        if lastWeekBias == "Long"
            lastWeekGZ := box.new(left=startOfLastWeek, right=x2Time, top=lastWeek0618, bottom=lastWeek05, border_color=lastWeekFibLevelsColor, bgcolor=color.new(lastWeekFibLevelsColor, 75), xloc=xloc.bar_time, text=showLabels ? "ðŸ’° LAST WEEK GZ" : "", text_size=size.large, text_color=lastWeekFibLevelsColor, text_formatting = text.format_bold)
        else
            lastWeekGZ := box.new(left=startOfLastWeek, right=x2Time, top=lastWeek05, bottom=lastWeek0618, border_color=lastWeekFibLevelsColor, bgcolor=color.new(lastWeekFibLevelsColor, 75), xloc=xloc.bar_time, text=showLabels ? "ðŸ’° LAST WEEK GZ" : "", text_size=size.large, text_color=lastWeekFibLevelsColor, text_formatting = text.format_bold)



// Draw Yesterday's High and Low
drawYesterdayHighLow() =>
    // Get the yesterday's high and low using daily timeframe
    yesterdayHigh = request.security(syminfo.tickerid, "D", high[1], lookahead=barmerge.lookahead_on)
    yesterdayLow  = request.security(syminfo.tickerid, "D", low[1], lookahead=barmerge.lookahead_on)

    // Get the time (in milliseconds) of the start of today and the start of yesterday
    //startOfToday = time("D")  // milliseconds since epoch                             DELETE
    //startOfYesterday = startOfToday - 1 * 24 * 60 * 60 * 1000  // subtract 1 day      DELETE

    startOfToday = timestamp("UTC", year, month, dayofmonth)
    startOfYesterday = startOfToday - 86400000

    x2Time = startOfToday + 5 * 24 * 60 * 60 * 1000  // extend 5 days to future

    // Only draw on first bar of the current day (to avoid multiple lines)
    isFirstBarOfDay = ta.change(startOfToday) != 0

    // Persistent lines and labels
    var line highLine = na
    var line lowLine = na
    var label highLabel = na
    var label lowLabel = na

    // This variable will store the bar index where yesterday started
    var int yesterdayStartBarIndex = na

    // Find the first bar where time >= startOfYesterday, only once per day
    if na(yesterdayStartBarIndex) and time >= startOfYesterday
        yesterdayStartBarIndex := bar_index

    if isFirstBarOfDay and not na(yesterdayStartBarIndex)
        // Delete old lines
        line.delete(highLine)
        line.delete(lowLine)
        label.delete(highLabel)
        label.delete(lowLabel)

        // Will only draw on Tuesday, Wednesday, Thursday and Friday
        if dayofweek == dayofweek.tuesday or dayofweek == dayofweek.wednesday or dayofweek == dayofweek.thursday or dayofweek == dayofweek.friday
            // Create new horizontal rays (extend to the right)
            highLine := line.new(x1=startOfYesterday, y1=yesterdayHigh, x2=x2Time, y2=yesterdayHigh, xloc=xloc.bar_time, extend=extend.none, color=yesterdayHighLowColor, width=2)
            lowLine := line.new(x1=startOfYesterday, y1=yesterdayLow, x2=x2Time, y2=yesterdayLow, xloc=xloc.bar_time, extend=extend.none, color=yesterdayHighLowColor, width=2)

            // Add label x coordinate at the center of yesterday
            xLabel = (startOfYesterday + startOfToday) / 2

            // Show labels (if enabled)
            if showLabels
                highLabel := label.new(x=xLabel, y=yesterdayHigh, text="YESTERDAY HIGH (" + str.tostring(yesterdayHigh, format.mintick) + ")", xloc=xloc.bar_time, style=label.style_none, textcolor=yesterdayHighLowColor, size=size.normal)
                lowLabel := label.new(x=xLabel, y=yesterdayLow, text="YESTERDAY LOW (" + str.tostring(yesterdayLow, format.mintick) + ")", xloc=xloc.bar_time, style=label.style_none, textcolor=yesterdayHighLowColor, size=size.normal)



// Set the Yesterday bias variable
setYesterdayBias() =>
    if yesterdayManualBias == "Long ðŸ“ˆ"
        "Long"
    else
        "Short"



// Draw Yesterday's Fibonacci levels and Golden Zone based on its bias
drawYesterdayFibLevels(yesterdayBias) =>
    // Get the yesterday's high and low using daily timeframe
    yesterdayHigh = request.security(syminfo.tickerid, "D", high[1], lookahead=barmerge.lookahead_on)
    yesterdayLow  = request.security(syminfo.tickerid, "D", low[1], lookahead=barmerge.lookahead_on)

    // Get the time (in milliseconds) of the start of today and the start of yesterday
    //startOfToday = time("D")  // milliseconds since epoch                                 DELETE
    //startOfYesterday = startOfToday - 1 * 24 * 60 * 60 * 1000  // subtract 1 day          DELETE

    startOfToday = timestamp("UTC", year, month, dayofmonth)
    startOfYesterday = startOfToday - 86400000

    x2Time = startOfToday + 5 * 24 * 60 * 60 * 1000  // extend 5 days to future

    // Difference between Yesterday's High and Low price
    deltaHighLow = yesterdayHigh - yesterdayLow

    // FibLevels
    float yesterday05 = na
    float yesterday0618 = na
    float yesterday1618 = na

    // Set the Fib Levels based on the bias
    if yesterdayBias == "Long"
        yesterday05 := yesterdayLow + (deltaHighLow * 0.5)
        yesterday0618 := yesterdayLow + (deltaHighLow * 0.618)
        yesterday1618 := yesterdayLow + (deltaHighLow * 1.618)
    else
        yesterday05 := yesterdayHigh - (deltaHighLow * 0.5)
        yesterday0618 := yesterdayHigh - (deltaHighLow * 0.618)
        yesterday1618 := yesterdayHigh - (deltaHighLow * 1.618)

    // Only draw on first bar of the current day (to avoid multiple lines)
    isFirstBarOfDay = ta.change(startOfToday) != 0

    // Persistent lines and labels
    var line yesterday05Line = na
    var line yesterday0618Line = na
    var line yesterday1618Line = na
    var label yesterday05Label = na
    var label yesterday0618Label = na
    var label yesterday1618Label = na
    var box yesterdayGZ = na

    // This variable will store the bar index where yesterday started
    var int yesterdayStartBarIndex = na

    // Find the first bar where time >= startOfYesterday, only once per day
    if na(yesterdayStartBarIndex) and time >= startOfYesterday
        yesterdayStartBarIndex := bar_index

    if isFirstBarOfDay and not na(yesterdayStartBarIndex)
        // Delete old lines
        line.delete(yesterday05Line)
        line.delete(yesterday0618Line)
        line.delete(yesterday1618Line)
        label.delete(yesterday05Label)
        label.delete(yesterday0618Label)
        label.delete(yesterday1618Label)
        box.delete(yesterdayGZ)

        // Will only draw on Tuesday, Wednesday, Thursday and Friday
        if dayofweek == dayofweek.tuesday or dayofweek == dayofweek.wednesday or dayofweek == dayofweek.thursday or dayofweek == dayofweek.friday
            // Create new horizontal rays (extend to the right)
            yesterday05Line := line.new(x1=startOfYesterday, y1=yesterday05, x2=x2Time, y2=yesterday05, xloc=xloc.bar_time, extend=extend.none, color=yesterdayFibLevelsColor, width=2)
            yesterday0618Line := line.new(x1=startOfYesterday, y1=yesterday0618, x2=x2Time, y2=yesterday0618, xloc=xloc.bar_time, extend=extend.none, color=yesterdayFibLevelsColor, width=2)
            yesterday1618Line := line.new(x1=startOfYesterday, y1=yesterday1618, x2=x2Time, y2=yesterday1618, xloc=xloc.bar_time, extend=extend.none, color=yesterdayFibLevelsColor, width=2)

            // Add label x coordinate at the center of yesterday
            xLabel = (startOfYesterday + startOfToday) / 2

            // Show labels (if enabled)
            if showLabels
                yesterday05Label := label.new(x=xLabel, y=yesterday05, text="YESTERDAY 0.500 (" + str.tostring(yesterday05, format.mintick) + ")", xloc=xloc.bar_time, style=label.style_none, textcolor=yesterdayFibLevelsColor, size=size.normal)
                yesterday0618Label := label.new(x=xLabel, y=yesterday0618, text="YESTERDAY 0.618 (" + str.tostring(yesterday0618, format.mintick) + ")", xloc=xloc.bar_time, style=label.style_none, textcolor=yesterdayFibLevelsColor, size=size.normal)
                yesterday1618Label := label.new(x=xLabel, y=yesterday1618, text="YESTERDAY 1.618 (" + str.tostring(yesterday1618, format.mintick) + ")", xloc=xloc.bar_time, style=label.style_none, textcolor=yesterdayFibLevelsColor, size=size.normal)

            // Draw Golden Zone
            if yesterdayBias == "Long"
                yesterdayGZ := box.new(left=startOfYesterday, right=x2Time, top=yesterday0618, bottom=yesterday05, border_color=yesterdayFibLevelsColor, bgcolor=color.new(yesterdayFibLevelsColor, 75), xloc=xloc.bar_time, text=showLabels ? "ðŸ¤‘ YESTERDAY GZ" : "", text_size=size.large, text_color=yesterdayFibLevelsColor, text_formatting = text.format_bold)
            else
                yesterdayGZ := box.new(left=startOfYesterday, right=x2Time, top=yesterday05, bottom=yesterday0618, border_color=yesterdayFibLevelsColor, bgcolor=color.new(yesterdayFibLevelsColor, 75), xloc=xloc.bar_time, text=showLabels ? "ðŸ¤‘ YESTERDAY GZ" : "", text_size=size.large, text_color=yesterdayFibLevelsColor, text_formatting = text.format_bold)




/////////////////////////////////////////////////////////////////////
// VARIABLES
/////////////////////////////////////////////////////////////////////
string lastWeekBias = setLastWeekBias()
string yesterdayBias = setYesterdayBias()


///////////////////////////////////////////////////////////////////////
// MAIN
///////////////////////////////////////////////////////////////////////

// SMAs
sma1Line = ta.sma(close, sma1Length)
sma2Line = ta.sma(close, sma2Length)
plot(sma1Line, title="SMA 1", color=sma1Color, linewidth=2, display=display.all - display.status_line)
plot(sma2Line, title="SMA 2", color=sma2Color, linewidth=2, display=display.all - display.status_line)

// Last Week
drawLastWeekHighLow()
drawLastWeekFibLevels(lastWeekBias)

// Yesterday
drawYesterdayHighLow()
drawYesterdayFibLevels(yesterdayBias)

